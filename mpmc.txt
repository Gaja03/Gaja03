7a

#include<msp430.h> 
int main(void) 
{
WDTCTL = WDTPW | WDTHOLD; // Stop watchdog timer 
P1DIR |= 0x01; // Set P1.0 to output direction
while(1)
 {
volatile unsigned long i; // Volatile to prevent
//optimization
P1OUT ^= 0x01; // Toggle P1.0 using XOR i = 50000; // SW Delay
do i--;
while(i != 0);
}
}

7b

#include<msp430.h> 
int main(void) 
{
WDTCTL = WDTPW | WDTHOLD; // Stop watchdog timer 
P1DIR |= 0x40; // Set P1.6 to output direction
P1REN |= 0x08; P1OUT |= 0X08;
while(1) {
if ((P1IN & BIT3)) { // If button is open(P1.3 HIGH) P1OUT = P1OUT | BIT6; // ... turn on LED
} // or P1OUT |= BIT0;
else {
P1OUT = P1OUT & ~BIT6; // ... else turn it off.
// or P1OUT &= ~BIT0
}
}
}



8a

Main_active.c

#include <msp430g2553.h>
#ifndef TIMER0_A1_VECTOR
#define TIMER0_A1_VECTOR TIMERA1_VECTOR
#define TIMER0_A0_VECTOR TIMERA0_VECTOR
#endif
volatile long tempRaw;
volatile unsigned int i;
 void FaultRoutine(void);
void ConfigWDT(void);
void ConfigClocks(void);
void ConfigPins(void);
void ConfigADC10(void);
void ConfigTimerA2(void);
void main(void)
{
ConfigWDT();
ConfigClocks();
ConfigPins();
ConfigADC10();
ConfigTimerA2();
_BIS_SR(GIE);
while(1)
{
    for(i=100;i>0;i--);
    for(i=5000;i>0;i--);
}
}
void ConfigWDT(void)
{
WDTCTL = WDTPW + WDTHOLD;
}
void ConfigClocks(void)
{
if (CALBC1_1MHZ ==0xFF || CALDCO_1MHZ == 0xFF)
FaultRoutine();
BCSCTL1 = CALBC1_1MHZ; DCOCTL = CALDCO_1MHZ; BCSCTL3 |= LFXT1S_2; IFG1 &= ~OFIFG;
BCSCTL2 |= SELM_0 + DIVM_3 + DIVS_3;
}
void FaultRoutine(void)
{
P1OUT = BIT0;
while(1);
}
void ConfigPins(void)
{
P1DIR = ~BIT3; P1OUT = 0;
P2SEL = ~(BIT6 + BIT7); P2DIR |= BIT6 + BIT7; P2OUT = 0;
}
void ConfigADC10(void)
{
ADC10CTL1 = INCH_10 + ADC10DIV_0;
}
void ConfigTimerA2(void)
{
CCTL0 = CCIE; CCR0 = 36000;
TACTL = TASSEL_1 + MC_2;
}
#pragma vector=TIMER0_A0_VECTOR
interrupt void Timer_A (void)
{
ADC10CTL0 = SREF_1 + ADC10SHT_3 + REFON + ADC10ON;
_delay_cycles(4);
ADC10CTL0 |= ENC + ADC10SC; P1OUT |= BIT6;
_delay_cycles(100); ADC10CTL0 &= ~ENC;
ADC10CTL0 &= ~(REFON + ADC10ON);
tempRaw = ADC10MEM;
P1OUT &= ~BIT6; CCR0 +=36000;
}

8b

Main_standby.c:


#include <msp430g2553.h>
 #ifndef TIMER0_A1_VECTOR
#define TIMER0_A1_VECTOR TIMERA1_VECTOR 
#define TIMER0_A0_VECTOR TIMERA0_VECTOR
#endif
volatile long tempRaw;
//volatile unsigned int i; 
void FaultRoutine(void); 
void ConfigWDT(void);
 void ConfigClocks(void); 
void ConfigPins(void); 
void ConfigADC10(void); 
void ConfigTimerA2(void); 
void main(void)
{
ConfigWDT();
 ConfigClocks(); 
ConfigPins(); 
ConfigADC10(); 
ConfigTimerA2();
// _BIS_SR(GIE);
while(1)
{
_bis_SR_register(LPM3_bits + GIE);
}
}
void ConfigWDT(void)
{
WDTCTL = WDTPW + WDTHOLD;
}
void ConfigClocks(void)
{
if (CALBC1_1MHZ ==0xFF || CALDCO_1MHZ == 0xFF)
FaultRoutine();
BCSCTL1 = CALBC1_1MHZ;
DCOCTL = CALDCO_1MHZ; BCSCTL3 |= LFXT1S_2; IFG1 &= ~OFIFG;
BCSCTL2 |= SELM_0 + DIVM_3 + DIVS_3;
}
void FaultRoutine(void)
{
P1OUT = BIT0; // P1.0 on (red LED)
while(1); // TRAP
}
void ConfigPins(void)
{
P1DIR = ~BIT3; // P1.6 and P1.0 outputs P1OUT = 0;
P2SEL = ~(BIT6 + BIT7); P2DIR |= BIT6 + BIT7;
P2OUT = 0;// LEDs off
}
void ConfigADC10(void)
{
ADC10CTL1 = INCH_10 + ADC10DIV_0;
}
void ConfigTimerA2(void)
{
CCTL0 = CCIE; CCR0 = 36000;
TACTL = TASSEL_1 + MC_2;
}
#pragma vector=TIMER0_A0_VECTOR
interrupt void Timer_A (void)
{
ADC10CTL0 = SREF_1 + ADC10SHT_3 + REFON + ADC10ON;
_delay_cycles(4);
ADC10CTL0 |= ENC + ADC10SC; P1OUT |= BIT6; // P1.6 on (green LED)
_delay_cycles(100); ADC10CTL0 &= ~ENC;
ADC10CTL0 &= ~(REFON + ADC10ON);
tempRaw = ADC10MEM; P1OUT &= ~BIT6;
CCR0 +=36000;
_bic_SR_register_on_exit(LPM3_bits);
}


9

#include <msp430.h>
 int main(void)
{
WDTCTL = WDTPW + WDTHOLD; // Stop WDT
P1DIR |= BIT6; // Set P1.6 to output direction 
P1REN |= BIT3; // Enable P1.3 internal resistance
 P1OUT |= BIT3; // Set P1.3 as pull up resistance 
P1IES |= BIT3; // P1.3 High/Low Edge
P1IFG &= ~BIT3; // P1.3 IFG Cleared
 P1IE |= BIT3; // P1.3 Interrupt Enabled
_bis_SR_register(LPM4_bits + GIE); // Enter LPM4 w/ interrupt
_no_operation(); // For debugger
}
#pragma vector=PORT1_VECTOR 
interrupt void Port_1 (void)
{
P1OUT ^= BIT6; // Toggle P1.6 P1IFG &= ~BIT3; // P1.3 IFG Cleared
}


10

#include <msp430.h>
 int a[5]={0,32,64,128,255};
 int i=0;
void main(void)
{
WDTCTL = WDTPW + WDTHOLD; // Stop WDT
//IE1 |=WDTIE;
P1DIR |= BIT6; // Set P1.6 to output direction
P1SEL |= BIT6;
TA0CCR0=512;
TA0CCR1=a[0];
TA0CCTL1=OUTMOD_7;
//BELOW COUNT,LOW VOLTAGEWHEN PADD
TA0CTL=TASSEL_2+MC_1+TAIE+ID_3;
_bis_SR_register(LPM0_bits + GIE); // Enter LPM4 w/ interrupt
while(1);
}
#pragma vector=TIMER0_A1__VECTOR
interrupt void Port_1 (void)
{
TA0CTL &=~TAIFG;
TA0CCR1=a[++i];
if(i>4)
{
i=0;
}
}


11

#include <msp430g2553.h> 
int main(void)
{
WDTCTL = WDTPW + WDTHOLD; // Stop WDT ADC10CTL0 = SREF_0 + ADC10SHT_2 + ADC10ON;
ADC10CTL1 = INCH_3; // input A3 ADC10AE0 |= 0x08; // PA.3 ADC option select P1DIR |= 0x01; // Set P1.0 to output direction While (1)
{
ADC10CTL0 |= ENC + ADC10SC; // Sampling and conversion start
if (ADC10MEM < 512) // ADC10MEM = A3 > 512?
P1OUT &= ~0x01; // Clear P1.0 LED off
else
P1OUT |= 0x01; // Set P1.0 LED on
}
}